[{"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\index.js":"1","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\App.js":"2","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Main\\Main.js":"4","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\About\\AboutTemplate.js":"5","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\BoardTemplate.js":"6","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\ChatTemplate.js":"7","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\About\\Profile.js":"8","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\GuestBook.js":"9","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\_Basic\\SideBar.js":"10","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\_Basic\\ProgressBar.js":"11","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\DelayedRender.js":"12","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\SelectContainer.js":"13","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\Messages.js":"14","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Result\\ResultTemplate.js":"15","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\Form.js":"16","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\Comments.js":"17","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\Select.js":"18","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\Message.js":"19","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\useInputState.js":"20","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\Comment.js":"21","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\SpeechBubble.js":"22"},{"size":517,"mtime":1612165680245,"results":"23","hashOfConfig":"24"},{"size":373,"mtime":1612379588150,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1612165680247,"results":"26","hashOfConfig":"24"},{"size":5221,"mtime":1612580758237,"results":"27","hashOfConfig":"24"},{"size":3893,"mtime":1612529171832,"results":"28","hashOfConfig":"24"},{"size":943,"mtime":1612551484532,"results":"29","hashOfConfig":"24"},{"size":3610,"mtime":1612589767677,"results":"30","hashOfConfig":"24"},{"size":1714,"mtime":1612529171835,"results":"31","hashOfConfig":"24"},{"size":821,"mtime":1612580758210,"results":"32","hashOfConfig":"24"},{"size":917,"mtime":1612529171895,"results":"33","hashOfConfig":"24"},{"size":728,"mtime":1612263733845,"results":"34","hashOfConfig":"24"},{"size":434,"mtime":1612580758219,"results":"35","hashOfConfig":"24"},{"size":1089,"mtime":1612589767696,"results":"36","hashOfConfig":"24"},{"size":1805,"mtime":1612589767687,"results":"37","hashOfConfig":"24"},{"size":2242,"mtime":1612580758246,"results":"38","hashOfConfig":"24"},{"size":1276,"mtime":1612551484546,"results":"39","hashOfConfig":"24"},{"size":1222,"mtime":1612580758206,"results":"40","hashOfConfig":"24"},{"size":758,"mtime":1612589767691,"results":"41","hashOfConfig":"24"},{"size":506,"mtime":1612589767682,"results":"42","hashOfConfig":"24"},{"size":437,"mtime":1612551484555,"results":"43","hashOfConfig":"24"},{"size":727,"mtime":1612580758202,"results":"44","hashOfConfig":"24"},{"size":1603,"mtime":1612589767700,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"dax61n",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\index.js",[],["101","102"],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\App.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Main\\Main.js",["103"],"import React, { useState, useEffect, createElement } from 'react';\r\nimport style from './Main.module.css';\r\nimport '../../fonts/font.css';\r\n\r\nimport ChatTemplate from '../Chat/ChatTemplate';\r\nimport AboutTemplate from '../About/AboutTemplate';\r\nimport BoardTemplate from '../Board/BoardTemplate';\r\n\r\nimport testImg from '../../Images/frame-test.png';\r\nimport aboutImg from '../../Images/frame-about.png';\r\nimport bluePin from '../../Images/blue-pin.png';\r\nimport tape from '../../Images/tape.png';\r\nimport bedge from '../../Images/sookmyung-symbol.png';\r\nimport noonsong from '../../Images/noonsong1.gif';\r\n\r\n\r\nfunction Main(props) {\r\n  const [isTestModalOpened, setIsTestModalOpened] = useState(false);\r\n  const [isAboutModalOpened, setIsAboutModalOpened] = useState(false);\r\n  const [isBoardModalOpened, setIsBoardModalOpened] = useState(false);\r\n\r\n  const openTestModal = () => {\r\n    setIsTestModalOpened(true);\r\n    setIsAboutModalOpened(false);\r\n    setIsBoardModalOpened(false);\r\n  }\r\n\r\n  const closeTestModal = () => {\r\n    setIsTestModalOpened(false);\r\n  }\r\n\r\n  const openAboutModal = () => {\r\n    setIsTestModalOpened(false);\r\n    setIsAboutModalOpened(true);\r\n    setIsBoardModalOpened(false);\r\n  }\r\n\r\n  const closeAboutModal = () => {\r\n    setIsAboutModalOpened(false);\r\n  }\r\n\r\n  const openBoardModal = () => {\r\n    setIsAboutModalOpened(false);\r\n    setIsTestModalOpened(false);\r\n    setIsBoardModalOpened(true);\r\n  }\r\n\r\n  const closeBoardModal = () => {\r\n    setIsBoardModalOpened(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.onload = async () => {\r\n      let typingTxts = document.querySelectorAll('.' + style.typingtxt);\r\n      /* map은 비동기 작업을 기다려주지 않아서 for문 사용 */\r\n      for (let i = 0; i < typingTxts.length; i++) {\r\n        let typingBool = false; \r\n        let typingIdx = 0; \r\n        let typingTxt = typingTxts[i].innerText.split('');\r\n        if (typingBool === false) {\r\n          typingBool = true;\r\n          await intervalHandler(typingTxt, typingIdx);\r\n          document.querySelector('.' + style.typing).innerHTML = document.querySelector('.' + style.typing).innerHTML + '<br/>';\r\n        }\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  const intervalHandler = (typingTxt, typingIdx) => {\r\n    return new Promise((resolve, reject) => {\r\n      var tyInt = setInterval(() => { \r\n        if (typingIdx < typingTxt.length) {\r\n          document.querySelector('.' + style.typing).append(typingTxt[typingIdx]);\r\n          typingIdx++; \r\n        } else { \r\n          clearInterval(tyInt);\r\n          resolve();\r\n        } \r\n      }, 60);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className={style.contentwrapper}>\r\n      <div className={style.framewrapper}>\r\n        <div className={style.polaroid} onClick={openAboutModal}>\r\n          <div className={style.imagewrapper}>\r\n            <img src={aboutImg} alt=\"about\" className={style.image}/>\r\n            <img src={bluePin} alt=\"pin\" className={style.pin}/>\r\n          </div>\r\n          <div className={style.postit}>Gitribute 팀원 소개 →</div>\r\n        </div>\r\n        <div className={style.mainpage}>\r\n          <h1 className={style.title}>\r\n            ❄️ 나는 어떤 타입의 <span className={style.highlight}>눈송이</span>일까? \r\n          </h1>\r\n          <div className={style.textwrapper}>\r\n            <p className={style.typingtxt}>\r\n              n년차 눈송이인 당신! 당신은 어떤 타입의 눈송이인지 확인해보고 싶지 않으셨나요?\r\n            </p>\r\n            <p className={style.typingtxt}>\r\n              그런 당신을 위해 특별히 DSC Sookmyung의 Gitribute 팀에서 야심차게 눈송이 유형 테스트를 준비했습니다.  ٩꒰｡•◡•｡꒱۶ \r\n            </p>\r\n            <p className={style.typingtxt}>\r\n              눈송이 유형 테스트를 통해 본인도 몰랐던 자신의 귀여움과 특별함을 찾아보세요!\r\n            </p>\r\n            <p className={style.typingtxt}>\r\n            아래의 학교 사진을 눌러 테스트를 시작할 수 있답니다  ◡‿◡✿ \r\n            </p>\r\n          </div>\r\n          \r\n          <p className={style.typing}></p> \r\n          <img src={noonsong} alt=\"noonsong\" className={style.noonsong}/>\r\n        </div>\r\n        <div className={style.original} onClick={openTestModal}>\r\n          <div className={style.postit}>테스트 바로가기 →</div>\r\n            <div className={style.imagewrapper}>\r\n              <img src={testImg} alt=\"test\" className={style.image}/>\r\n              <img src={tape} alt=\"tape\" className={style.tape}/>\r\n            </div>\r\n        </div>\r\n        <div className={style.sticker} onClick={openBoardModal}>\r\n          <div className={style.bedgewrapper}>\r\n            <img src={bedge} alt=\"bedge\" className={style.bedge + ' ' + style.image}/>\r\n          </div>\r\n          <div className={style.postit}>방명록 →</div>\r\n        </div>\r\n        <ChatTemplate isOpened={isTestModalOpened} close={closeTestModal}/>\r\n        <AboutTemplate isOpened={isAboutModalOpened} close={closeAboutModal}/>\r\n        <BoardTemplate isOpened={isBoardModalOpened} close={closeBoardModal}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\About\\AboutTemplate.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\BoardTemplate.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\ChatTemplate.js",["104","105","106","107","108","109"],"import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport SelectContainer from './SelectContainer';\r\nimport Messages from './Messages';\r\nimport SideBar from '../_Basic/SideBar';\r\nimport ProgressBar from '../_Basic/ProgressBar';\r\nimport ResultTemplate from '../Result/ResultTemplate'\r\nimport DelayedRender from './DelayedRender';\r\n\r\nconst ChatTemplate = ({ isOpened, close }) => {\r\n  const [numbers, setNumbers] = useState([1]);\r\n  const [selected, setSelected] = useState([]);\r\n  const [nowSelected, setNowSelected] = useState([]);\r\n  const [loaded, setLoaded] = useState(true);\r\n  const [isResultModalOpened, setIsResultModalOpened] = useState(false);\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (!mounted.current) {\r\n      mounted.current = true;\r\n    }\r\n    else {\r\n      setNumbers([...numbers, numbers[numbers.length - 1] + 1]);\r\n    }\r\n    console.log(selected);\r\n  }, [selected])\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      setTimeout(() => setLoaded(true), 1000);\r\n    }\r\n  }, [loaded]);\r\n\r\n  useEffect(async () => {\r\n    let res = await fetch('http://localhost:8000/questions/');\r\n    await res.json().then((data) => {\r\n      setQuestions(data);\r\n      console.log(questions);\r\n    })\r\n  }, [])\r\n\r\n  const getSelected = useCallback((selectedIndex) => {\r\n    setNowSelected([...nowSelected, selectedIndex]);\r\n    setTimeout(() => setSelected([...selected, selectedIndex]), 1000);\r\n    setNumbers([...numbers, numbers[numbers.length - 1] + 1]);\r\n  });\r\n\r\n  const handleLoad = () => {\r\n    setLoaded(!loaded);\r\n  }\r\n\r\n  const closeResultModal = () => {\r\n    setIsResultModalOpened(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    { isOpened ? (\r\n      <div>\r\n        <ChatModal>\r\n          <SideBar close={close}/>\r\n          { numbers.length < 26 ? (\r\n          <ContentWrapper>\r\n            <MBoxWrapper>\r\n              <Messages numbers={numbers} contents={questions} selected={nowSelected} loaded={loaded}/>\r\n            </MBoxWrapper>\r\n            <DelayedRender delay={1000}>\r\n              <SelectContainer \r\n                index={Math.ceil(numbers.length / 2)} \r\n                getSelected={getSelected}\r\n                handleLoad={handleLoad}\r\n                contents={questions}>\r\n              </SelectContainer>\r\n            </DelayedRender>\r\n          </ContentWrapper>\r\n          ) : (\r\n          <ContentWrapper>\r\n            <ProgressBarWrapper disappear={!loaded}>\r\n              <ProgressBar/>\r\n            </ProgressBarWrapper>\r\n            <DelayedRender delay={1000}>\r\n              <ResultTemplate isOpened={true} close={closeResultModal}></ResultTemplate>\r\n            </DelayedRender>\r\n          </ContentWrapper>\r\n          )}\r\n        </ChatModal>\r\n      </div>\r\n    ) : null}\r\n  </>\r\n  );\r\n}\r\n\r\nexport default ChatTemplate;\r\n\r\nconst Background = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst ChatModal = styled.div`\r\n  width: 40rem;\r\n  height: 40rem;\r\n  background-color: white;\r\n  position: absolute;\r\n  top: 50%;\r\n  left 50%;\r\n  transform: translate(-50%, -50%);\r\n  border-radius: 1rem;\r\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst MBoxWrapper = styled.div`\r\n  width: 100%;\r\n  height: 75%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ProgressBarWrapper = styled.div`\r\n  display: none;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  ${props =>\r\n  props.disappear &&\r\n  css`\r\n    display: block;\r\n  `}\r\n`;\r\n","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\About\\Profile.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\GuestBook.js",["110","111","112"],"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Comments from './Comments';\r\nimport Form from './Form';\r\n\r\nfunction GuestBook() {\r\n  const [comments, setComments] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    /* get comments */\r\n    let res = await fetch('http://localhost:8000/feedbacks/');\r\n    await res.json().then((data) => {\r\n      setComments(data);\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Comments comments={comments} />\r\n      <Form saveComment={(commentObject) => {\r\n        setComments((prevComments) => {\r\n          console.log(comments);\r\n          return [...prevComments, commentObject]\r\n        });\r\n        /* post comments */\r\n        // let res = fetch('http://localhost:8000/feedbacks/')\r\n      }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GuestBook;\r\n","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\_Basic\\SideBar.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\_Basic\\ProgressBar.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\DelayedRender.js",["113"],"import { useState, useEffect } from 'react';\r\n\r\nconst useDelayedRender = delay => {\r\n  const [delayed, setDelayed] = useState(true);\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => setDelayed(false), delay);\r\n    return () => clearTimeout(timeout);\r\n  }, []);\r\n  return fn => !delayed && fn();\r\n};\r\n\r\nconst DelayedRender = ({ delay, children }) => useDelayedRender(delay)(() => children);\r\n\r\nexport default DelayedRender;\r\n","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\SelectContainer.js",["114"],"import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Select from './Select';\r\n\r\nconst SelectContainer = ({index, getSelected, handleLoad, contents}) => {\r\n  const onClickSelect = (selectedIndex) => (e) => {\r\n    getSelected(selectedIndex);\r\n    handleLoad();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <StyledSelectContainer>\r\n        <Select onClick={onClickSelect(1)}>{contents[index - 1].answers[0].answer}</Select>\r\n        <Select onClick={onClickSelect(2)}>{contents[index - 1].answers[1].answer}</Select>\r\n      </StyledSelectContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst StyledSelectContainer = styled.div`\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  padding: 1rem;\r\n  /* flexbox 스타일 */\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-right: auto;\r\n  justify-content: flex-start;\r\n  overflow: auto;\r\n  /* scrollbar */\r\n  &::-webkit-scrollbar {\r\n    height: 8px;\r\n    border-radius: 8px;\r\n    background: #f1f3f5;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: #dee2e6;\r\n    border-radius: 6px;\r\n  }\r\n`;\r\n\r\nexport default SelectContainer;\r\n","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\Messages.js",["115","116"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport Message from './Message';\r\nimport DelayedRender from './DelayedRender'\r\nimport './TypingDot.css';\r\n\r\nconst AlwaysScrollToBottom = () => {\r\n  const scrollRef = useRef();\r\n  useEffect(() => scrollRef.current.scrollIntoView());\r\n  return <div ref={scrollRef} />;\r\n};\r\n\r\nconst Messages = ({ numbers, contents, selected, loaded }) => {\r\n  return (\r\n    <div className=\"messagesSection\">\r\n      <MessagesContainer>\r\n        {numbers.map((v) => {\r\n          return (\r\n            <div className=\"messagesContainer\">\r\n              <Message key={`message ${v}`} text={contents[Math.ceil(v / 2) - 1]} selectedAnswer={selected} index={v} />\r\n              {(v === numbers.length) ? (\r\n                <Wrapper disappear={!loaded}>\r\n                <div class=\"dot-typing\"></div>\r\n                </Wrapper>\r\n              ) : (null)}\r\n              <AlwaysScrollToBottom />\r\n            </div>\r\n          );\r\n        })}\r\n      </MessagesContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messages;\r\n\r\nconst MessagesContainer = styled.div`\r\n  height: 30rem;\r\n  overflow-y: scroll;\r\n\r\n  /* scrollbar */\r\n  ::-webkit-scrollbar {\r\n    width: 16px;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n      height: 6px;\r\n      border: 4px solid rgba(0, 0, 0, 0);\r\n      background-clip: padding-box;\r\n      -webkit-border-radius: 7px;\r\n      background-color: #f1f3f5; // background: #dee2e6;\r\n      -webkit-box-shadow: inset -1px -1px 0px rgba(0, 0, 0, 0.05), inset 1px 1px 0px rgba(0, 0, 0, 0.05);\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: none;\r\n  margin-top: 10px;\r\n  padding: 15px;\r\n  font-family: arial;\r\n\r\n  ${props =>\r\n  props.disappear &&\r\n  css`\r\n    display: block;\r\n    float: left;\r\n    `}\r\n`;\r\n","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Result\\ResultTemplate.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\Form.js",["117","118"],"import React from \"react\"\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport useInputState from './useInputState';\r\nimport style from './Form.module.css';\r\n\r\nconst Form = ({ saveComment }) => {\r\n  const { name, comment, reset, onChangeName, onChangeComment } = useInputState('');\r\n  \r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        saveComment({name: name, comment: comment});\r\n        reset();\r\n      }}\r\n      className={style.form}\r\n    >\r\n      <div className={style.inputWrapper}>\r\n        <TextField\r\n          variant=\"standard\"  // outlined\r\n          label=\"닉네임\"\r\n          margin=\"normal\"\r\n          onChange={onChangeName}\r\n          value={name}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          variant=\"standard\"  // outlined\r\n          label=\"댓글 쓰기\"\r\n          margin=\"normal\"\r\n          onChange={onChangeComment}\r\n          value={comment}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n        />\r\n      </div>\r\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{margin: \"0.7rem\"}}>작성하기</Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\Comments.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\Select.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\Message.js",[],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\useInputState.js",["119"],"import { useState } from 'react';\r\n\r\nexport default (initialValue) => {\r\n  const [name, setName] = useState(initialValue);\r\n  const [comment, setComment] = useState(initialValue);\r\n\r\n  return {\r\n    name,\r\n    comment,\r\n    onChangeName: (event) => {\r\n      setName(event.target.value);\r\n    },\r\n    onChangeComment: (event) => {\r\n      setComment(event.target.value);\r\n    },\r\n    reset: () => { setName(''); setComment(''); }\r\n  };\r\n};",["120","121"],"C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Board\\Comment.js",["122"],"import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst StyledComment = styled.div`\r\n  display: inline-block;\r\n  width: auto;\r\n  padding: 1rem 1.4rem;\r\n  margin: 0.4rem;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  margin-bottom: 0.8rem;\r\n  font-size: 0.8rem;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst Content = styled.p`\r\n  color: #666666;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    clear: both;\r\n  }\r\n`;\r\n\r\nconst Comment = ({ name, comment }) => {\r\n  console.log(name);\r\n  return (\r\n    <Wrapper>\r\n      <StyledComment>\r\n        <Name>{name}</Name>\r\n        <Content>{comment}</Content>\r\n      </StyledComment>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Comment;\r\n","C:\\Users\\SM-PC\\Desktop\\DSC SolutionChallenge\\2021-Gitribute\\frontend\\src\\components\\Chat\\SpeechBubble.js",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":1,"column":38,"nodeType":"129","messageId":"130","endLine":1,"endColumn":51},{"ruleId":"127","severity":1,"message":"131","line":15,"column":10,"nodeType":"129","messageId":"130","endLine":15,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":27,"column":6,"nodeType":"134","endLine":27,"endColumn":16,"suggestions":"135"},{"ruleId":"132","severity":1,"message":"136","line":35,"column":13,"nodeType":"137","endLine":41,"endColumn":4},{"ruleId":"132","severity":1,"message":"138","line":41,"column":6,"nodeType":"134","endLine":41,"endColumn":8,"suggestions":"139"},{"ruleId":"132","severity":1,"message":"140","line":43,"column":23,"nodeType":"129","endLine":43,"endColumn":34},{"ruleId":"127","severity":1,"message":"141","line":96,"column":7,"nodeType":"129","messageId":"130","endLine":96,"endColumn":17},{"ruleId":"127","severity":1,"message":"142","line":1,"column":38,"nodeType":"129","messageId":"130","endLine":1,"endColumn":44},{"ruleId":"127","severity":1,"message":"143","line":1,"column":46,"nodeType":"129","messageId":"130","endLine":1,"endColumn":57},{"ruleId":"132","severity":1,"message":"136","line":8,"column":13,"nodeType":"137","endLine":14,"endColumn":4},{"ruleId":"132","severity":1,"message":"144","line":8,"column":6,"nodeType":"134","endLine":8,"endColumn":8,"suggestions":"145"},{"ruleId":"127","severity":1,"message":"146","line":1,"column":17,"nodeType":"129","messageId":"130","endLine":1,"endColumn":26},{"ruleId":"127","severity":1,"message":"147","line":1,"column":36,"nodeType":"129","messageId":"130","endLine":1,"endColumn":44},{"ruleId":"127","severity":1,"message":"148","line":4,"column":8,"nodeType":"129","messageId":"130","endLine":4,"endColumn":21},{"ruleId":"149","severity":1,"message":"150","line":26,"column":11,"nodeType":"151","endLine":26,"endColumn":29},{"ruleId":"149","severity":1,"message":"150","line":37,"column":11,"nodeType":"151","endLine":37,"endColumn":29},{"ruleId":"152","severity":1,"message":"153","line":3,"column":1,"nodeType":"154","endLine":18,"endColumn":3},{"ruleId":"123","replacedBy":"155"},{"ruleId":"125","replacedBy":"156"},{"ruleId":"127","severity":1,"message":"157","line":2,"column":18,"nodeType":"129","messageId":"130","endLine":2,"endColumn":21},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'createElement' is defined but never used.","Identifier","unusedVar","'isResultModalOpened' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'numbers'. Either include it or remove the dependency array. You can also do a functional update 'setNumbers(n => ...)' if you only need 'numbers' in the 'setNumbers' call.","ArrayExpression",["160"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'questions'. Either include it or remove the dependency array.",["161"],"React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'Background' is assigned a value but never used.","'useRef' is defined but never used.","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.",["162"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'DelayedRender' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["158"],["159"],"'css' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [numbers, selected]",{"range":"169","text":"170"},"Update the dependencies array to be: [questions]",{"range":"171","text":"172"},"Update the dependencies array to be: [delay]",{"range":"173","text":"174"},[1020,1030],"[numbers, selected]",[1351,1353],"[questions]",[266,268],"[delay]"]